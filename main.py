import os
import re
import requests
from bs4 import BeautifulSoup
import tweepy
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ContextTypes
from notion_client import Client as NotionClient
from github import Github
import json

# API Keys
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TWITTER_BEARER = os.getenv("TWITTER_BEARER_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
NOTION_API_KEY = os.getenv("NOTION_API_KEY")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

# Initialize clients
openai.api_key = OPENAI_API_KEY
twitter_client = tweepy.Client(bearer_token=TWITTER_BEARER) if TWITTER_BEARER else None
github_client = Github(GITHUB_TOKEN) if GITHUB_TOKEN else None
notion_client = NotionClient(auth=NOTION_API_KEY) if NOTION_API_KEY else None

def get_website_info(url: str) -> str:
    try:
        r = requests.get(url, timeout=10, headers={'User-Agent': 'Mozilla/5.0'})
        soup = BeautifulSoup(r.text, "html.parser")
        title = soup.title.string.strip() if soup.title else url
        
        # Extract social links
        links = [a.get('href') for a in soup.find_all('a', href=True)]
        social = []
        for link in set(links):
            if not link:
                continue
            if 'twitter.com' in link or 'x.com' in link:
                social.append(f"üê¶ {link}")
            elif 'github.com' in link:
                social.append(f"üêô {link}")
            elif 'discord.gg' in link or 'discord.com/invite' in link:
                social.append(f"üîó {link}")
        
        return f"üåê –°–∞–π—Ç: {title}\n" + "\n".join(social[:5])
    except Exception as e:
        return f"üåê –°–∞–π—Ç: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {str(e)[:50]}"

def get_tokenomics(symbol: str) -> str:
    if not symbol:
        return "üî¢ –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞: —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    result = []
    
    # CoinGecko API (free)
    try:
        cg_url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol}&vs_currencies=usd&include_market_cap=true&include_24hr_vol=true"
        cg_resp = requests.get(cg_url, timeout=10).json()
        if cg_resp:
            data = list(cg_resp.values())[0]
            price = data.get('usd', 0)
            mcap = data.get('usd_market_cap', 0)
            vol = data.get('usd_24h_vol', 0)
            result.append(f"üí∞ –¶–µ–Ω–∞: ${price:.6f}")
            result.append(f"üìä Market Cap: ${mcap:,.0f}")
            result.append(f"üìà Volume 24h: ${vol:,.0f}")
    except:
        result.append("üí∞ CoinGecko: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # DeFiLlama
    try:
        llama_url = "https://api.llama.fi/protocols"
        llama_resp = requests.get(llama_url, timeout=10).json()
        matches = [p for p in llama_resp if p.get('symbol', '').lower() == symbol.lower()]
        if matches:
            tvl = matches[0].get('tvl', 0)
            result.append(f"üîê TVL: ${tvl:,.0f}")
    except:
        result.append("üîê DeFiLlama: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    return "\n".join(result) if result else "üî¢ –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

def get_twitter_stats(handle: str) -> str:
    if not twitter_client:
        return "üê¶ Twitter: API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    try:
        handle = handle.replace('@', '')
        user = twitter_client.get_user(username=handle, user_fields=['public_metrics'])
        if user.data:
            metrics = user.data.public_metrics
            followers = metrics['followers_count']
            following = metrics['following_count']
            tweets = metrics['tweet_count']
            return f"üê¶ @{handle}: {followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, {tweets:,} —Ç–≤–∏—Ç–æ–≤"
        return f"üê¶ @{handle}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return f"üê¶ Twitter: –æ—à–∏–±–∫–∞ - {str(e)[:50]}"

def get_github_info(repo_url: str) -> str:
    if not github_client:
        return "üêô GitHub: API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    try:
        match = re.search(r'github\.com/([^/]+/[^/]+)', repo_url)
        if not match:
            return "üêô GitHub: –Ω–µ–≤–µ—Ä–Ω—ã–π URL"
        
        repo = github_client.get_repo(match.group(1))
        commits = list(repo.get_commits()[:3])
        stars = repo.stargazers_count
        forks = repo.forks_count
        
        commit_msgs = [c.commit.message.split('\n')[0][:50] for c in commits]
        
        return f"üêô {repo.name}: ‚≠ê{stars} üç¥{forks}\nüìù –ö–æ–º–º–∏—Ç—ã: {'; '.join(commit_msgs)}"
    except Exception as e:
        return f"üêô GitHub: –æ—à–∏–±–∫–∞ - {str(e)[:50]}"

def analyze_discord(invite_url: str) -> str:
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ –≤–µ–±-–∑–∞–ø—Ä–æ—Å
        invite_code = invite_url.split('/')[-1]
        api_url = f"https://discord.com/api/v9/invites/{invite_code}?with_counts=true"
        
        response = requests.get(api_url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            guild_name = data.get('guild', {}).get('name', 'Unknown')
            members = data.get('approximate_member_count', 0)
            online = data.get('approximate_presence_count', 0)
            
            return f"üîî {guild_name}: ~{members:,} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, ~{online:,} –æ–Ω–ª–∞–π–Ω"
        else:
            return "üîî Discord: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except Exception as e:
        return f"üîî Discord: –æ—à–∏–±–∫–∞ - {str(e)[:50]}"

def get_manual_analysis(data: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI"""
    analysis = []
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    data_lower = data.lower()
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    if "–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤" in data_lower:
        follower_match = re.search(r'(\d+[,\d]*)\s+–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', data_lower)
        if follower_match:
            followers = int(follower_match.group(1).replace(',', ''))
            if followers > 100000:
                analysis.append("‚úÖ –°–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
            elif followers > 10000:
                analysis.append("üü° –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
            else:
                analysis.append("üî¥ –ú–∞–ª–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
    
    # –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞
    if "market cap" in data_lower:
        analysis.append("‚úÖ –¢–æ–∫–µ–Ω –≤ –æ–±–æ—Ä–æ—Ç–µ")
    elif "–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" in data_lower:
        analysis.append("üéØ –í–æ–∑–º–æ–∂–Ω—ã–π airdrop (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)")
    
    # GitHub –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if "github" in data_lower and "‚≠ê" in data:
        star_match = re.search(r'‚≠ê(\d+)', data)
        if star_match:
            stars = int(star_match.group(1))
            if stars > 1000:
                analysis.append("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
            elif stars > 100:
                analysis.append("üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
    
    # Discord –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" in data_lower:
        member_match = re.search(r'(\d+[,\d]*)\s+—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', data_lower)
        if member_match:
            members = int(member_match.group(1).replace(',', ''))
            if members > 50000:
                analysis.append("‚úÖ –ë–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
            elif members > 10000:
                analysis.append("üü° –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
    
    # –û–±—â–∏–π –≤—ã–≤–æ–¥
    if len(analysis) == 0:
        return "ü§ñ –ê–Ω–∞–ª–∏–∑: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏"
    
    score = len([a for a in analysis if a.startswith("‚úÖ")])
    
    if score >= 3:
        verdict = "üöÄ –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
    elif score >= 2:
        verdict = "üü° –°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
    else:
        verdict = "‚ö†Ô∏è –ù–∏–∑–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
    
    return f"ü§ñ –ê–Ω–∞–ª–∏–∑: {verdict}\nüìä –§–∞–∫—Ç–æ—Ä—ã: {' | '.join(analysis)}"

def research_project(url: str) -> str:
    results = []
    
    # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞
    results.append(get_website_info(url))
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Twitter handle
    twitter_handle = None
    twitter_match = re.search(r'(?:twitter\.com|x\.com)/([A-Za-z0-9_]+)', url)
    if twitter_match:
        twitter_handle = twitter_match.group(1)
        results.append(get_twitter_stats(twitter_handle))
    
    # –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Twitter handle –∫–∞–∫ —Å–∏–º–≤–æ–ª)
    if twitter_handle:
        results.append(get_tokenomics(twitter_handle))
    
    # GitHub –∞–Ω–∞–ª–∏–∑
    github_match = re.search(r'github\.com/[^\s]+', url)
    if github_match:
        results.append(get_github_info(github_match.group(0)))
    
    # Discord –∞–Ω–∞–ª–∏–∑
    discord_match = re.search(r'discord\.gg/[A-Za-z0-9]+', url)
    if discord_match:
        discord_result = analyze_discord(discord_match.group(0))
        results.append(discord_result)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    summary = "\n\n".join(filter(None, results))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    analysis = get_manual_analysis(summary)
    summary += f"\n\n{analysis}"
    
    return summary

# Telegram handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ Crypto Research Bot –∞–∫—Ç–∏–≤–µ–Ω!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑:\n"
        "‚Ä¢ –°–∞–π—Ç –∏ —Å–æ—Ü—Å–µ—Ç–∏\n"
        "‚Ä¢ Twitter —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞\n"
        "‚Ä¢ GitHub –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ Discord —Å–æ–æ–±—â–µ—Å—Ç–≤–æ\n"
        "‚Ä¢ AI –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    urls = re.findall(r'https?://[^\s]+', text)
    
    if not urls:
        await update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç...")
    
    for url in urls[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 —Å—Å—ã–ª–∫–∏
        try:
            result = research_project(url)
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(result) > 4000:
                parts = [result[i:i+4000] for i in range(0, len(result), 4000)]
                for part in parts:
                    await update.message.reply_text(part)
            else:
                await update.message.reply_text(result)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)[:100]}")

def main():
    if not TELEGRAM_TOKEN:
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # Telegram –±–æ—Ç
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
