import os
import re
import requests
from bs4 import BeautifulSoup
import tweepy
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ContextTypes
from notion_client import Client as NotionClient
from github import Github
import json
import time

# API Keys
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TWITTER_BEARER = os.getenv("TWITTER_BEARER_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
NOTION_API_KEY = os.getenv("NOTION_API_KEY")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

# Initialize clients
twitter_client = tweepy.Client(bearer_token=TWITTER_BEARER) if TWITTER_BEARER else None
github_client = Github(GITHUB_TOKEN) if GITHUB_TOKEN else None
notion_client = NotionClient(auth=NOTION_API_KEY) if NOTION_API_KEY else None

def get_website_info(url: str) -> str:
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }
        
        r = requests.get(url, timeout=15, headers=headers)
        soup = BeautifulSoup(r.text, "html.parser")
        
        # –ü–æ–ª—É—á–∞–µ–º title
        title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–π—Ç"
        if soup.title:
            title = soup.title.string.strip()
        elif soup.find('h1'):
            title = soup.find('h1').get_text().strip()
        
        # –ò—â–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
        social_links = []
        
        # –ü–æ–∏—Å–∫ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        selectors = [
            'a[href*="twitter.com"]', 'a[href*="x.com"]',
            'a[href*="github.com"]', 'a[href*="discord.gg"]',
            'a[href*="discord.com/invite"]', 'a[href*="t.me"]',
            'a[href*="medium.com"]', 'a[href*="telegram"]'
        ]
        
        for selector in selectors:
            links = soup.select(selector)
            for link in links:
                href = link.get('href')
                if href and href.startswith('http'):
                    if 'twitter.com' in href or 'x.com' in href:
                        social_links.append(f"üê¶ Twitter: {href}")
                    elif 'github.com' in href:
                        social_links.append(f"üêô GitHub: {href}")
                    elif 'discord' in href:
                        social_links.append(f"üîî Discord: {href}")
                    elif 't.me' in href or 'telegram' in href:
                        social_links.append(f"üì± Telegram: {href}")
                    elif 'medium.com' in href:
                        social_links.append(f"üìù Medium: {href}")
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        text_content = soup.get_text()
        
        # –ü–æ–∏—Å–∫ Twitter handles –≤ —Ç–µ–∫—Å—Ç–µ
        twitter_handles = re.findall(r'@[A-Za-z0-9_]{1,15}', text_content)
        for handle in twitter_handles[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
            social_links.append(f"üê¶ Twitter: https://twitter.com/{handle[1:]}")
        
        # –ü–æ–∏—Å–∫ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        github_repos = re.findall(r'github\.com/[A-Za-z0-9_-]+/[A-Za-z0-9_.-]+', text_content)
        for repo in github_repos[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2
            social_links.append(f"üêô GitHub: https://{repo}")
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_social = list(dict.fromkeys(social_links))
        
        result = f"üåê –°–∞–π—Ç: {title[:100]}"
        if unique_social:
            result += "\n" + "\n".join(unique_social[:8])  # –ú–∞–∫—Å–∏–º—É–º 8 —Å—Å—ã–ª–æ–∫
        else:
            result += "\n‚ùå –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return result
        
    except Exception as e:
        return f"üåê –°–∞–π—Ç: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {str(e)[:100]}"

def get_tokenomics(symbol: str) -> str:
    if not symbol:
        return "üî¢ –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞: —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    result = []
    
    # CoinGecko API - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
        search_url = f"https://api.coingecko.com/api/v3/search?query={symbol}"
        search_resp = requests.get(search_url, timeout=10)
        
        if search_resp.status_code == 200:
            search_data = search_resp.json()
            coins = search_data.get('coins', [])
            
            if coins:
                coin_id = coins[0]['id']
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ
                price_url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd&include_market_cap=true&include_24hr_vol=true&include_24hr_change=true"
                price_resp = requests.get(price_url, timeout=10)
                
                if price_resp.status_code == 200:
                    price_data = price_resp.json()
                    
                    if coin_id in price_data:
                        data = price_data[coin_id]
                        price = data.get('usd', 0)
                        mcap = data.get('usd_market_cap', 0)
                        vol = data.get('usd_24h_vol', 0)
                        change = data.get('usd_24h_change', 0)
                        
                        result.append(f"üí∞ –¢–æ–∫–µ–Ω: {coins[0]['name']} (${coins[0]['symbol'].upper()})")
                        result.append(f"üí≤ –¶–µ–Ω–∞: ${price:.6f}")
                        result.append(f"üìä Market Cap: ${mcap:,.0f}")
                        result.append(f"üìà Volume 24h: ${vol:,.0f}")
                        result.append(f"üìâ Change 24h: {change:.2f}%")
    except Exception as e:
        result.append(f"üí∞ CoinGecko: –æ—à–∏–±–∫–∞ - {str(e)[:50]}")
    
    return "\n".join(result) if result else "üî¢ –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

def get_twitter_stats(handle: str) -> str:
    if not twitter_client:
        return "üê¶ Twitter: API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω—É–∂–µ–Ω TWITTER_BEARER_TOKEN)"
    
    try:
        handle = handle.replace('@', '').replace('https://twitter.com/', '').replace('https://x.com/', '')
        user = twitter_client.get_user(username=handle, user_fields=['public_metrics', 'created_at'])
        
        if user.data:
            metrics = user.data.public_metrics
            followers = metrics['followers_count']
            following = metrics['following_count']
            tweets = metrics['tweet_count']
            likes = metrics['like_count']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–≤–∏—Ç—ã
            tweets_data = twitter_client.get_users_tweets(user.data.id, max_results=5)
            recent_activity = "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç–≤–∏—Ç–æ–≤"
            
            if tweets_data.data:
                recent_tweets = len(tweets_data.data)
                recent_activity = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {recent_tweets} —Ç–≤–∏—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã"
            
            return f"üê¶ @{handle}:\nüë• {followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\nüìù {tweets:,} —Ç–≤–∏—Ç–æ–≤\n‚ù§Ô∏è {likes:,} –ª–∞–π–∫–æ–≤\nüîÑ {recent_activity}"
        
        return f"üê¶ @{handle}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return f"üê¶ Twitter: –æ—à–∏–±–∫–∞ - {str(e)[:100]}"

def get_github_info(repo_url: str) -> str:
    if not github_client:
        return "üêô GitHub: API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω—É–∂–µ–Ω GITHUB_TOKEN)"
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º owner/repo –∏–∑ URL
        match = re.search(r'github\.com/([^/]+/[^/\s]+)', repo_url)
        if not match:
            return "üêô GitHub: –Ω–µ–≤–µ—Ä–Ω—ã–π URL"
        
        repo_path = match.group(1).rstrip('/')
        repo = github_client.get_repo(repo_path)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stars = repo.stargazers_count
        forks = repo.forks_count
        issues = repo.open_issues_count
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
        commits = list(repo.get_commits()[:3])
        commit_info = []
        
        for commit in commits:
            msg = commit.commit.message.split('\n')[0][:60]
            date = commit.commit.author.date.strftime('%d.%m')
            commit_info.append(f"‚Ä¢ {date}: {msg}")
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        languages = repo.get_languages()
        top_lang = max(languages.keys(), key=lambda x: languages[x]) if languages else "Unknown"
        
        return f"üêô {repo.name}:\n‚≠ê {stars:,} –∑–≤–µ–∑–¥, üç¥ {forks:,} —Ñ–æ—Ä–∫–æ–≤\nüêõ {issues} –æ—Ç–∫—Ä—ã—Ç—ã—Ö issues\nüíª –Ø–∑—ã–∫: {top_lang}\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:\n" + "\n".join(commit_info)
        
    except Exception as e:
        return f"üêô GitHub: –æ—à–∏–±–∫–∞ - {str(e)[:100]}"

def analyze_discord(invite_url: str) -> str:
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite_code = invite_url.split('/')[-1].split('?')[0]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API Discord
        api_url = f"https://discord.com/api/v10/invites/{invite_code}?with_counts=true"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        response = requests.get(api_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            guild = data.get('guild', {})
            guild_name = guild.get('name', 'Unknown Server')
            members = data.get('approximate_member_count', 0)
            online = data.get('approximate_presence_count', 0)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            description = guild.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            features = guild.get('features', [])
            
            result = f"üîî {guild_name}:\nüë• ~{members:,} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\nüü¢ ~{online:,} –æ–Ω–ª–∞–π–Ω"
            
            if description and description != '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è':
                result += f"\nüìù {description[:100]}"
            
            if features:
                result += f"\n‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(features[:3])}"
            
            return result
        else:
            return f"üîî Discord: —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})"
    except Exception as e:
        return f"üîî Discord: –æ—à–∏–±–∫–∞ - {str(e)[:100]}"

def get_manual_analysis(data: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI"""
    analysis = []
    score = 0
    
    data_lower = data.lower()
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    if "twitter" in data_lower:
        if "–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤" in data_lower:
            follower_match = re.search(r'(\d+[,\d]*)\s+–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', data_lower)
            if follower_match:
                followers = int(follower_match.group(1).replace(',', ''))
                if followers > 100000:
                    analysis.append("‚úÖ –°–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ Twitter")
                    score += 2
                elif followers > 10000:
                    analysis.append("üü° –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ Twitter")
                    score += 1
                else:
                    analysis.append("üî¥ –ú–∞–ª–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ Twitter")
        else:
            analysis.append("üîç Twitter –Ω–∞–π–¥–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑ GitHub
    if "github" in data_lower:
        if "–∑–≤–µ–∑–¥" in data_lower or "‚≠ê" in data:
            star_match = re.search(r'‚≠ê\s*(\d+[,\d]*)', data)
            if star_match:
                stars = int(star_match.group(1).replace(',', ''))
                if stars > 1000:
                    analysis.append("‚úÖ –ü–æ–ø—É–ª—è—Ä–Ω—ã–π GitHub –ø—Ä–æ–µ–∫—Ç")
                    score += 2
                elif stars > 100:
                    analysis.append("üü° –°—Ä–µ–¥–Ω—è—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å GitHub")
                    score += 1
                else:
                    analysis.append("üî¥ –ú–∞–ª–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å GitHub")
        else:
            analysis.append("üîç GitHub –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –ê–Ω–∞–ª–∏–∑ Discord
    if "discord" in data_lower:
        if "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" in data_lower:
            member_match = re.search(r'(\d+[,\d]*)\s+—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', data_lower)
            if member_match:
                members = int(member_match.group(1).replace(',', ''))
                if members > 50000:
                    analysis.append("‚úÖ –ë–æ–ª—å—à–æ–µ Discord —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
                    score += 2
                elif members > 10000:
                    analysis.append("üü° –°—Ä–µ–¥–Ω–µ–µ Discord —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
                    score += 1
                else:
                    analysis.append("üî¥ –ú–∞–ª–æ–µ Discord —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
        else:
            analysis.append("üîç Discord –Ω–∞–π–¥–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–º–∏–∫–∏
    if "market cap" in data_lower or "—Ü–µ–Ω–∞" in data_lower:
        analysis.append("‚úÖ –¢–æ–∫–µ–Ω —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ —Ä—ã–Ω–∫–µ")
        score += 1
    elif "–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" in data_lower:
        analysis.append("üéØ –í–æ–∑–º–æ–∂–Ω—ã–π airdrop (—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã" in data_lower:
        analysis.append("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
        score += 1
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    if score >= 5:
        verdict = "üöÄ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
    elif score >= 3:
        verdict = "üü¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
    elif score >= 2:
        verdict = "üü° –°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
    elif score >= 1:
        verdict = "üî¥ –ù–∏–∑–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
    else:
        verdict = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    
    if len(analysis) == 0:
        return "ü§ñ –ê–Ω–∞–ª–∏–∑: –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–∞–π—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥."
    
    return f"ü§ñ –ê–Ω–∞–ª–∏–∑: {verdict}\nüìä –§–∞–∫—Ç–æ—Ä—ã:\n" + "\n".join(f"   {factor}" for factor in analysis)

def research_project(url: str) -> str:
    results = []
    
    # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞
    website_info = get_website_info(url)
    results.append(website_info)
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö
    if "üê¶ Twitter:" in website_info:
        twitter_links = re.findall(r'üê¶ Twitter: (https?://[^\s]+)', website_info)
        for twitter_link in twitter_links[:1]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É
            handle = twitter_link.split('/')[-1]
            results.append(get_twitter_stats(handle))
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –ø–æ handle
            results.append(get_tokenomics(handle))
    
    # –ê–Ω–∞–ª–∏–∑ GitHub
    if "üêô GitHub:" in website_info:
        github_links = re.findall(r'üêô GitHub: (https?://[^\s]+)', website_info)
        for github_link in github_links[:1]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É
            results.append(get_github_info(github_link))
    
    # –ê–Ω–∞–ª–∏–∑ Discord
    if "üîî Discord:" in website_info:
        discord_links = re.findall(r'üîî Discord: (https?://[^\s]+)', website_info)
        for discord_link in discord_links[:1]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É
            results.append(analyze_discord(discord_link))
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    summary = "\n\n".join(filter(None, results))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
    analysis = get_manual_analysis(summary)
    summary += f"\n\n{analysis}"
    
    return summary

# Telegram handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ Crypto Research Bot v2.0 –∞–∫—Ç–∏–≤–µ–Ω!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:\n"
        "‚Ä¢ üåê –°–∞–π—Ç –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n"
        "‚Ä¢ üê¶ Twitter —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üî¢ –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ (CoinGecko)\n"
        "‚Ä¢ üêô GitHub –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ üîî Discord —Å–æ–æ–±—â–µ—Å—Ç–≤–æ\n"
        "‚Ä¢ ü§ñ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞\n\n"
        "‚öôÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏:\n"
        "‚Ä¢ TWITTER_BEARER_TOKEN\n"
        "‚Ä¢ GITHUB_TOKEN"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    urls = re.findall(r'https?://[^\s]+', text)
    
    if not urls:
        await update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
    
    for url in urls[:1]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É
        try:
            result = research_project(url)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(result) > 4000:
                parts = [result[i:i+3800] for i in range(0, len(result), 3800)]
                for i, part in enumerate(parts):
                    if i > 0:
                        await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}:")
                    await update.message.reply_text(part)
            else:
                await update.message.reply_text(result)
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)[:200]}")

def main():
    if not TELEGRAM_TOKEN:
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    if not TWITTER_BEARER:
        print("‚ö†Ô∏è TWITTER_BEARER_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω - Twitter –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    if not GITHUB_TOKEN:
        print("‚ö†Ô∏è GITHUB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω - GitHub –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # Telegram –±–æ—Ç
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("üöÄ Crypto Research Bot –∑–∞–ø—É—â–µ–Ω...")
    print("üì° –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π")
    print("üîß –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ TWITTER_BEARER_TOKEN –∏ GITHUB_TOKEN")
    
    app.run_polling()

if __name__ == '__main__':
    main()
